@page "/newticket"

@using TicketManager.Models.Models

@inject HttpClient http
@inject NavigationManager Navigation


<!--
 Basic user data form
-->
<h3>Add Ticket</h3>
<br>
<form>
    <div class="form-group">
        <label for="inputLabolatoryLocation">Lab location</label>
        <select id="inputLabolatoryLocation" class="form-control" asp-items @onchange="OnLabLocationChanged">
            <option selected>Choose labolatory location...</option>
            <option>...</option>
            @foreach (var item in LabolatoryLocationsList)
            {
                <option value="@item.LabLocationId">@item.Country</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="formRequestorEmail">Requestor email</label>
        <input type="text" class="form-control" id="formRequestorEmail" placeholder="Requestor email input" @bind="UserTicketVM.RequestorEmail">
    </div>

    <div class="form-group">
        <label for="inputFactoryLocation">Factory location</label>
        <select id="inputFactorylocation" class="form-control" asp-items @onchange="OnFactoryLocationChanged">
            <option selected>Choose your factory location...</option>
            <option>...</option>
            @foreach (var item in FactoryLocationsList)
            {
                <option value="@item.FactoryLocationId">@item.Country</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="inputDepartmentLocation">Your department location</label>
        <select id="inputDepartmentlocation" class="form-control" asp-items @bind="UserTicketVM.DepartmentId">
            <option selected>Choose your department...</option>
            <option>...</option>
            @foreach (var item in DepartmentsDedicatedList)
            {
                <option value="@item.DepartmentId">@item.DepartmentDescription</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="inputProductFamily">Product family</label>
        <select id="inputProductFamily" class="form-control" asp-items @onchange="OnProductFamilyChanged">
            >
            <option selected>Choose product family...</option>
            <option>...</option>
            @foreach (var item in ProductFamiliesList)
            {
                <option value="@item.ProductFamilyId">@item.FamilyDescription</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="inputProductType">Product type</label>
        <select id="inputProductType" class="form-control" asp-items @onchange="OnProductTypeChanged">
            <option selected>Choose product type...</option>
            <option>...</option>
            @foreach (var item in ProductTypesDedicatedList)
            {
                <option value="@item.ProductTypeId">@item.ProductTypeDesc</option>
            }
        </select>
    </div>
    </form>


@code {
    private Ticket UserTicketVM = new Ticket
        {
            TicketTests = new List<TicketTest>(),
            RequestorDepartment = new(),
            LabLocation = new(),
            Product = new(),
            TicketStatus = new()
        };

    private TicketTest UserTicketTestVM = new TicketTest
        {
            TicketTestParameters = new List<TicketTestParameter>(),
            Ticket = new()
        };

    List<LabLocation> LabolatoryLocationsList = new List<LabLocation>();
    List<FactoryLocation> FactoryLocationsList = new List<FactoryLocation>();
    List<Department> DepartmentsDedicatedList = new List<Department>();
    List<ProductFamily> ProductFamiliesList = new List<ProductFamily>();
    List<ProductType> ProductTypesDedicatedList = new List<ProductType>();
    List<ProductDisplacement> ProductDisplacementsDedicatedList = new List<ProductDisplacement>();
    List<Test> TestsDedicatedList = new List<Test>();
    List<TestParameter> TestParametersDedicatedList = new List<TestParameter>();


    protected override async Task OnInitializedAsync()
    {
        LabolatoryLocationsList = await http.GetFromJsonAsync<List<LabLocation>>("https://localhost:7259/api/lablocation") ?? new List<LabLocation>();
        FactoryLocationsList = await http.GetFromJsonAsync<List<FactoryLocation>>("https://localhost:7259/api/factorylocation") ?? new List<FactoryLocation>();
        ProductFamiliesList = await http.GetFromJsonAsync<List<ProductFamily>>("https://localhost:7259/api/productfamilies") ?? new List<ProductFamily>();
    }

    private async Task LoadDedicatedDepartmentsByFactoryId(int factoryId)
    {
        DepartmentsDedicatedList = await http.GetFromJsonAsync<List<Department>>("https://localhost:7259/api/departmentbyfactory/" + factoryId) ?? new List<Department>();
    }

    private async Task LoadProductTypeDedicatedListByProductFamilyId(int productFamilyId)
    {
        ProductTypesDedicatedList = await http.GetFromJsonAsync<List<ProductType>>("https://localhost:7259/api/producttypebyproductfamily/" + productFamilyId) ?? new List<ProductType>();
    }

    private async Task LoadDedicatedProductDisplacements(int productTypeId)
    {
        ProductDisplacementsDedicatedList = await http.GetFromJsonAsync<List<ProductDisplacement>>($"https://localhost:7259/api/productdisplacementbyproductfamily/{productTypeId}") ?? new List<ProductDisplacement>();
    }

    private async Task LoadDedicatedTests(int testId)
    {

        TestsDedicatedList = await http.GetFromJsonAsync<List<Test>>($"https://localhost:7259/api/testbylablocation/{testId}") ?? new List<Test>();
    }

    private async Task LoadDedicatedTestParametersByTestId(int testId)
    {
        TestParametersDedicatedList = await http.GetFromJsonAsync<List<TestParameter>>($"https://localhost:7259/api/parametersbytestid/{testId}") ?? new List<TestParameter>();
        UserTicketTestVM.TicketTestParameters = ConvertTestParametersDedicatedListToTicketTestList(TestParametersDedicatedList);
    }

    private async Task OnProductTypeChanged(ChangeEventArgs e)
    {
        /*
        if (int.TryParse(e.Value.ToString(), out int productTypeId))
        {
            UserTicketVM.Product.ProductFamily.ProductType. = productTypeId;
            await LoadDedicatedProductDisplacements(UserTicketVM.Product.ProductTypeId);
        }
        */
    }

    private async Task OnFactoryLocationChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int factoryLocationId))
        {
            //selectedFactoryLocationId = factoryLocationId;
            UserTicketVM.RequestorDepartment.FactoryLocationId = factoryLocationId;
            await LoadDedicatedDepartmentsByFactoryId(UserTicketVM.RequestorDepartment.FactoryLocationId);
        }
    }

    private async Task OnProductFamilyChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int productFamilyId))
        {
            UserTicketVM.ProductId = productFamilyId;
            UserTicketVM.Product.ProductFamilyId = productFamilyId;
            await LoadProductTypeDedicatedListByProductFamilyId(UserTicketVM.Product.ProductFamilyId);
        }
    }

    private async Task OnTestPickedChanged(ChangeEventArgs e)
    {
        /*
        if (int.TryParse(e.Value.ToString(), out int testId))
        {
            // picked test chosen from list of dedicated tests by user
            UserTicketTestVM.Test = TestsDedicatedList.Find(id => id.TestId == testId) ?? new Test();
            UserTicketTestVM.TestId = testId;
            await LoadDedicatedTestParametersByTestId(testId);
        }
        */
    }

    private async Task OnLabLocationChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int labLocationId))
        {
            UserTicketVM.LabLocationId = labLocationId;
            await LoadDedicatedTests(labLocationId);
        }
    }

    private void AddTestAndItsParametersToThisTicket()
    {
        /*
        // check if test exist if exist update test in list
        if (UserTicketVM.TicketTests.Any(id => id.Test.TestId == UserTicketTestVM.Test.TestId))
        {
            int index = UserTicketVM.TicketTests.FindIndex(id => id.Test.TestId == UserTicketTestVM.Test.TestId);
            UserTicketVM.TicketTests[index] = UserTicketTestVM;
        }
        // test does not exist. add new test to list
        else
        {
            UserTicketVM.TicketTests.Add(UserTicketTestVM);
        }
        // reseting user ticket to reset adding test and its parameters value
        UserTicketTestVM = new TicketTest
            {
                TicketTestParameters = new List<TicketTestParameter>(),
                Test = new()
            };
            */
    }

    /// <summary>
    /// Convert TestParameters dedicated list to TicketList
    /// </summary>
    /// <param name="TestParametersDedicatedList"></param>
    /// <returns></returns>
    private List<TicketTestParameter> ConvertTestParametersDedicatedListToTicketTestList(List<TestParameter> testParametersDedicatedList)
    {
        List<TicketTestParameter> _convertedTicketTestParametersList = new();
        foreach (var testParameter in testParametersDedicatedList)
        {
            TicketTestParameter _testParameter = new();
            _testParameter.ParameterValue = 0;
            _testParameter.TestParameterId = testParameter.TestParameterId;
            _testParameter.TestParameter = testParameter;

            _convertedTicketTestParametersList.Add(_testParameter);
        }

        return _convertedTicketTestParametersList;
    }

    private void RemoveTestFromList(int testId)
    {
        /*
        UserTicketVM.TicketTests?.RemoveAll(id => id?.Test?.TestId == testId);
        */
    }

    private void EditTestFromList(int testId)
    {
        /*
        UserTicketTestVM = UserTicketVM?.TicketTests?.Find(id => id?.TestId == testId);
        */
    }

    private async Task CreateTicketRequest()
    {
        var response = await http.PostAsJsonAsync<Ticket>($"https://localhost:7259/api/ticketcreate", UserTicketVM);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/", true);
        }

    }
}